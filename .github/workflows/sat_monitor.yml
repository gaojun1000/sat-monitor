name: SAT Test Dates Monitor

on:
  schedule:
    # Run every 5 minutes (as per your previous request)
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Recommended update

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # As per your previous request
          cache: 'pip' # This handles caching for pip packages

      # Corrected caching for sat_monitor_state.json
      - name: Restore SAT Monitor state from cache
        id: sat-state-cache # Added an id for clarity and to access outputs
        uses: actions/cache@v4
        with:
          path: sat_monitor_state.json
          # Use a consistent key for saving and restoring this state file.
          # 'v1' can be incremented if you make breaking changes to the state file structure.
          key: ${{ runner.os }}-sat-monitor-state-data-v1

      - name: Initialize state file if no cache found
        # This step runs only if the cache was not restored (i.e., cache-hit is not 'true')
        if: steps.sat-state-cache.outputs.cache-hit != 'true'
        run: |
          echo '{"timestamp": "", "last_modified": "", "test_date_count": 0, "test_dates": []}' > sat_monitor_state.json
          echo "Initialized empty sat_monitor_state.json as no cache was restored."
        shell: bash # Explicitly set shell for clarity, bash is default on ubuntu-latest

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Run SAT Monitor
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '-1002594329611' }}
        run: |
          python sat_monitor.py

      - name: Save SAT Monitor state to cache
        # This step will run after your python script, saving the new state.
        # It uses the same key as the restore step to overwrite the cache with the latest state.
        uses: actions/cache@v4
        with:
          path: sat_monitor_state.json
          key: ${{ runner.os }}-sat-monitor-state-data-v1 # Must be the same key used in the restore step

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4 # Recommended update
        with:
          name: sat-monitor-logs-${{ github.run_id }}
          path: sat_monitor.log
          retention-days: 5