name: SAT Test Dates Monitor

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'

  # Allow manual triggering of the workflow
  workflow_dispatch:

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      actions: read  # Explicitly give permissions to read actions
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      # Wrap the cache action in a try block using GitHub script
      - name: Try to restore cache
        id: try-restore-cache
        continue-on-error: true
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const options = {
                path: 'sat_monitor_state.json',
                key: `sat-monitor-state-${context.runId}`,
                restoreKeys: ['sat-monitor-state-'],
              };
              await core.group('Restore Cache', async () => {
                await cache.restoreCache(options.path, options.key, options.restoreKeys);
              });
              core.setOutput('cache-restored', 'true');
            } catch (error) {
              console.log(`Cache restore failed: ${error.message}`);
              core.setOutput('cache-restored', 'false');
            }

      # Create an empty state file if it doesn't exist yet
      - name: Create empty state file if it doesn't exist
        run: |
          if [ ! -f sat_monitor_state.json ]; then
            echo '{"timestamp": "", "last_modified": "", "test_date_count": 0, "test_dates": []}' > sat_monitor_state.json
            echo "Created empty state file"
          else
            echo "State file exists"
          fi

      - name: Run SAT Monitor
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '-1002594329611' }}
        run: |
          python sat_monitor.py

      # Save the cache after the run
      - name: Save cache
        id: save-cache
        uses: actions/cache/save@v3
        continue-on-error: true
        with:
          path: sat_monitor_state.json
          key: sat-monitor-state-${{ github.run_id }}

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sat-monitor-logs-${{ github.run_id }}
          path: sat_monitor.log
          retention-days: 5