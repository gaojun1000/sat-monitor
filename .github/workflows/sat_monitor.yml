name: SAT Test Dates Monitor

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 10-23 * * 1-5'
  workflow_dispatch:

# Concurrency control to prevent overlapping runs for the same workflow and branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      actions: write   # For checkout and other actions
      contents: write  # For committing changes

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Retrieve full history for proper commits
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip' # This handles caching for pip packages

      - name: DEBUG - Check state file after checkout
        run: |
          echo "--- DEBUG: State File After Checkout ---"
          if [ -f sat_monitor_state.json ]; then
            echo "Content of sat_monitor_state.json:"
            cat sat_monitor_state.json
          else
            echo "sat_monitor_state.json does not exist after checkout."
            echo '{"timestamp": "", "last_modified": "", "test_date_count": 0, "test_dates": []}' > sat_monitor_state.json
            echo "Initialized empty sat_monitor_state.json."
          fi
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: Run SAT Monitor
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '-1002594329611' }}
        run: |
          python sat_monitor.py

      - name: DEBUG - Check state file after script run
        run: |
          echo "--- DEBUG: State File After Script Run ---"
          if [ -f sat_monitor_state.json ]; then
            echo "Content of sat_monitor_state.json:"
            cat sat_monitor_state.json
          else
            echo "sat_monitor_state.json does not exist after script run."
          fi
        shell: bash

      - name: Commit and push updated state file
        # Only run if the state file exists and has changed
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes in the state file
          if git diff --exit-code -- sat_monitor_state.json; then
            echo "No changes in state file. Skipping commit."
          else
            echo "Changes detected in state file. Committing..."
            git add sat_monitor_state.json
            git commit -m "Update SAT monitor state [skip ci]"
            git push
          fi
        shell: bash

      - name: Upload logs as artifact
        if: always() # Ensure logs are uploaded even if previous steps fail
        uses: actions/upload-artifact@v4
        with:
          name: sat-monitor-logs-${{ github.run_id }}
          path: sat_monitor.log # Ensure this is where your Python script writes its log
          retention-days: 5